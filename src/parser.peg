%prefix "parser"

%value "void *"
%earlyheader {
#pragma once
#include "string_t.h"
#include "emmem.h"
#include "em_result.h"

#include "extern_c_pre.h"
typedef struct parser_reader_t {
  string_t * line;
  int cur;
} parser_reader_t;

em_result
parser_reader_new(parser_reader_t * out, string_t * str);

int
parser_reader_getchar(parser_reader_t * reader);
}

%header {
#include "extern_c_post.h"
}

%source {
#include "ast.h"
#include "misc.h"
#if defined(__ESP_IDF__) || defined(RPI_PICO)
#define PCC_POOL_MIN_SIZE 256
#define PCC_BUFFER_MIN_SIZE 8
#endif
#define PCC_ERROR(auxil) fprintf(stderr, "ERROR\n")
#define PCC_GETCHAR(auxil) parser_reader_getchar(auxil)
#define PCC_MALLOC(auxil, size) malloc(size)
#define PCC_REALLOC(auxil, ptr, size) realloc(ptr, size)
#define PCC_FREE(auxil, ptr) free(ptr)

em_result
parser_reader_new(parser_reader_t * out, string_t * str) {
  out->line = str;
  out->cur = 0;
  return EM_RESULT_OK;
}
 
int
parser_reader_getchar(parser_reader_t * reader) {
  if(reader->line->length > reader->cur)
    return string_getAt(reader->line, reader->cur++);
  else
    return -1;
}

}

#toplevel <- s:definitions { $$ = parser_toplevel_new_definitions(s); }
toplevel <- s:definition { $$ = s; }
          / e:expression { $$ = parser_toplevel_new_expr(e); }

#definitions <- d:definition _ EOL (_ / EOL)* ds:definitions { $$ = parser_prepend_definitions(d, ds); }
#            /  d:definition (_ / EOL)*                        { $$ = nd; }

definition <- nd:node_definition { $$ = parser_toplevel_new_node(nd); }
            / dd:data_definition { $$ = parser_toplevel_new_data(dd); }
            / fd:func_definition { $$ = parser_toplevel_new_func(fd); }
	    / rd:record_definition { $$ = parser_toplevel_new_record(rd); }

node_definition <- _ 'node' __ 'init' _ '[' _ ie:expression _ ']' _ d:deconstructor (__ 'as' __ i:identifier)? _ '=' _ e: expression _ EOL { $$ = parser_node_new(d, e, ie, i); }
                 / _ 'node' __ d:deconstructor (__ 'init' _ '[' _ ie:expression _ ']')? (__ 'as' __ i:identifier)? _ '=' _ e: expression _ EOL { $$ = parser_node_new(d, e, ie, i); }

data_definition <- _ 'data' __ d:deconstructor _ '=' _ e:expression { $$ = parser_data_new(d, e); }
func_definition <- _ 'func' __ i:identifier _ '(' _ ds:empty_or_deconstructors _ ')' _ '=' _ e:expression { $$ = parser_func_new(i, ds, e); }
record_definition <- _ 'record' __ r:identifier _ '(' _ ds:identifiers _ ')' { $$ = parser_record_new(r, ds); }

identifiers <- i:identifier ',' _ is:identifiers { $$ = parser_identifiers_prepend(i, is); }
             / i:identifier                      { $$ = parser_identifiers_prepend(i, nullptr); }

deconstructor <- i:identifier                               { $$ = parser_deconstructor_new_identifier(i); }
                 / '(' _ ds:deconstructors _ ')'              { $$ = parser_deconstructor_new_tuple(nullptr, ds); }

deconstructors <- d:deconstructor (_ ',' _ ds:deconstructors)? { $$ = parser_deconstructors_prepend(d, ds); }
#             / d:deconstructor { $$ = parser_deconstructors_prepend(d, nullptr); }

empty_or_deconstructors <- ds:deconstructors { $$ = ds; }
                         / _ { $$ = nullptr; }

expression <- 'if' _ con:expression _ 'then' _ the:term _ 'else' _ els:expression { $$ = parser_expression_new_if(con, the, els); }
             / t:term { $$ = t; }

term <- l:logical { $$ = l; }
logical <- l:logical _ '&&' _ r:bitwise { $$ = parser_expression_new_dand(l, r); }
         / l:logical _ '||' _ r:bitwise { $$ = parser_expression_new_dor (l, r); }
         / b:bitwise { $$ = b; }

bitwise <- l:bitwise _ '&' _ r:comp { $$ = parser_expression_new_and(l, r); }
         / l:bitwise _ '|' _ r:comp { $$ = parser_expression_new_or (l, r); }
	 / l:bitwise _ '^' _ r:comp { $$ = parser_expression_new_xor(l, r); }
	 / c:comp { $$ = c; }

comp <- l:comp _ '='  _ r:comp2 { $$ = parser_expression_new_equal           (l, r); }
      / l:comp _ '!=' _ r:comp2 { $$ = parser_expression_new_not_equal       (l, r); }
      / c:comp2 { $$ = c; }
      
comp2 <- l:comp2 _ '<=' _ r:shift { $$ = parser_expression_new_less_or_equal   (l, r); }
       / l:comp2 _ '<'  _ r:shift { $$ = parser_expression_new_less_than       (l, r); }
       / l:comp2 _ '>=' _ r:shift { $$ = parser_expression_new_greater_or_equal(l, r); }
       / l:comp2 _ '>'  _ r:shift { $$ = parser_expression_new_greater_than    (l, r); }
       / s:shift                 { $$ = s; }

shift <- l:shift '<<' _ r:add { $$ = parser_expression_new_left_shift(l, r); }
       / l:shift '<<' _ r:add { $$ = parser_expression_new_right_shift(l, r); }
       / a:add                { $$ = a; }

add <- l:add _ '+' _ r:factor { $$ = parser_expression_new_addition(l, r); }
     / l:add _ '-' _ r:factor { $$ = parser_expression_new_subtraction(l, r); }
     / e:factor                 { $$ = e; }

factor <- l:factor _ '*' _ r:unary { $$ = parser_expression_new_multiplication(l, r); }
        / l:factor _ '/' _ r:unary { $$ = parser_expression_new_division(l, r); }
	/ l:factor _ '%' _ r:unary { $$ = parser_expression_new_modulo(l, r); }
        / e:primary                { $$ = e; }

unary <- '+' _ e:unary
       / '-' _ e:unary
       / '!' _ e:unary
       / e:primary     { $$ = e; }

function <- 'func' _ '(' _ ds:empty_or_deconstructors _ ')' _ '->' _ e:expression { $$ = parser_expression_new_function(ds, e); }

function_call <- ex:expression _ '(' _ ')' { $$ = parser_expression_new_function_call(ex, nullptr); }
               / ex:expression _ '(' _ t:tuple_inner _ ')' { $$ = parser_expression_new_function_call(ex, t); }

primary <- '0'                       { $$ = parser_expression_new_integer(0); }
         / <[1-9][0-9]*>             { $$ = parser_expression_new_integer(atoi($1)); }
         / '0x' <[0-9]+>             { $$ = parser_expression_new_integer(strtol($2, NULL, 16)); }
         / '0' <[0-9]+>              { $$ = parser_expression_new_integer(strtol($3, NULL, 8)); }
         / '(' _ e:expression _ ')'  { $$ = e; }
         / '(' _ vs:tuple_inner _ ')'{ $$ = vs; }
         / 'true'                    { $$ = parser_expression_true(); }
         / 'false'                   { $$ = parser_expression_false(); }
         / f:function                { $$ = f; }
         / fc:function_call          { $$ = fc; }
         / ident:lastidentifier      { $$ = parser_expression_new_last_identifier(ident); }
         / ident:identifier          { $$ = parser_expression_new_identifier(ident); }

tuple_inner <- e:expression _ ',' _ vs:tuple_inner { $$ = parser_expression_tuple_prepend(vs, e); }
             / e:expression { $$ = parser_expression_new_tuple(e); }

_ <- [ \t]*
__ <- [ \t]+
EOL <- '\n' / '\r\n' / '\r' / ';' / !.
lastidentifier <- <[a-zA-Z][a-zA-Z0-9_]*> '@last' { $$ = string_malloc_new($1); }
identifier <- [a-zA-Z][a-zA-Z0-9_]*  { $$ = string_malloc_new($0); }
